#!/usr/bin/env python3
"""
merge_structure_features.py

Fügt struktur-basierte Features zur bestehenden Feature-Matrix hinzu.
Voreingestellte Pfade zeigen in das Verzeichnis „output/“.
"""

from pathlib import Path
import argparse
import pandas as pd


# ---------- Hilfsfunktionen --------------------------------------------------
def load_and_transpose_feature_matrix(path: Path) -> pd.DataFrame:
    """Lädt die CSV (Gene als Spalten) und transponiert sie (Gene als Zeilen)."""
    df = pd.read_csv(path)
    df_t = df.set_index("GeneID").T.reset_index()
    df_t = df_t.rename(columns={"index": "GeneID"})
    return df_t


def load_and_aggregate_structure_features(path: Path) -> pd.DataFrame:
    """
    Lädt die Struktur-CSV, extrahiert eine verkürzte Phagen-ID
    und mittelt über alle fünf AlphaFold-Modelle desselben Proteins.
    """
    df = pd.read_csv(path)
    df["GeneID"] = df["structure"].str.extract(r"^([^_]+(?:_[^_]+)*?)_genes")[0]
    return df.groupby("GeneID").mean(numeric_only=True).reset_index()


def map_structure_group(gene_id: str) -> str | None:
    """Ordnet einem GeneID-String die passende Phagen-Gruppe zu."""
    s = gene_id.lower()
    if "dms3" in s:
        return "Pseudomonas_phage_DMS3"
    if "vpvv882" in s or "vp882" in s:
        return "Vibrio_phage_VP882"
    if "phikz" in s:
        return "Pseudomonas_phage_phiKZ"
    if "phiyy" in s:
        return "Pseudomonas_phage_phiYY_complete"
    if "phage_k" in s and "sau" not in s:
        return "Staphylococcus_phage_K"
    if "sau" in s or "515a1" in s:
        return "Staphylococcus_phage_vB_SauM-515A1"
    if "t4" in s:
        return "Enterobacteria_phage_T4"
    return None


def merge_features(feature_csv: Path, struct_csv: Path, out_csv: Path) -> None:
    """Führt alle Schritte aus und speichert die finale Matrix."""
    feat = load_and_transpose_feature_matrix(feature_csv)
    struct = load_and_aggregate_structure_features(struct_csv)

    # Phagen-Gruppe für jedes Gen bestimmen
    feat["Structure_Group"] = feat["GeneID"].apply(map_structure_group)

    # Mergen
    merged = feat.merge(
        struct, left_on="Structure_Group", right_on="GeneID", how="left"
    )

    # Aufräumen
    merged = (
        merged.drop(columns=["Structure_Group", "GeneID_y"])
        .rename(columns={"GeneID_x": "GeneID"})
    )

    merged.to_csv(out_csv, index=False)
    print(f"✅ Datei gespeichert: {out_csv.resolve()}")


# ---------- Skripteinstieg ---------------------------------------------------
if __name__ == "__main__":
    cwd = Path.cwd()

    parser = argparse.ArgumentParser(
        description="Fügt struktur-basierte Features zur Feature-Matrix hinzu."
    )
    parser.add_argument(
        "--feature",
        "-f",
        default=cwd / "output" / "feature_engineering_merged.csv",
        type=Path,
        help="Pfad zur ursprünglichen Feature-Matrix (CSV).",
    )
    parser.add_argument(
        "--structure",
        "-s",
        default=cwd / "output" / "structure_features.csv",
        type=Path,
        help="Pfad zur CSV mit Strukturmerkmalen.",
    )
    parser.add_argument(
        "--out",
        "-o",
        default=cwd / "output" / "feature_matrix_with_structure.csv",
        type=Path,
        help="Zielpfad der erweiterten Matrix (CSV).",
    )

    args = parser.parse_args()
    merge_features(args.feature, args.structure, args.out)
